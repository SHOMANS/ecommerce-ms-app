#!/bin/bash

# ุณูุฑูุจุช ุงุฎุชุจุงุฑ ุงูุฎุฏูุงุช ูู CI/CD Pipeline
# ูุชุฃูุฏ ูู ุฃู ุฌููุน ุงูุฎุฏูุงุช ุชุนูู ุจุดูู ุตุญูุญ

set -e

echo "๐งช ุจุฏุก ุงุฎุชุจุงุฑ ุงูุฎุฏูุงุช..."

# ุงูุชุธุงุฑ ุญุชู ุชุตุจุญ ุงูุฎุฏูุงุช ุฌุงูุฒุฉ
echo "โณ ุงูุชุธุงุฑ ุชุดุบูู ุงูุฎุฏูุงุช..."
sleep 30

# ูุชุบูุฑุงุช
GATEWAY_URL="http://localhost:8080"
AUTH_URL="http://localhost:3001"
USERS_URL="http://localhost:3002"

# ุฏุงูุฉ ููุชุญูู ูู ุตุญุฉ ุงูุงุณุชุฌุงุจุฉ
check_health() {
    local service_name=$1
    local url=$2
    
    echo "๐ ุงุฎุชุจุงุฑ $service_name ุนูู $url"
    
    response=$(curl -s -o /dev/null -w "%{http_code}" "$url/health" || echo "000")
    
    if [ "$response" = "200" ]; then
        echo "โ $service_name ูุนูู ุจุดูู ุตุญูุญ"
        return 0
    else
        echo "โ $service_name ูุง ูุนูู - ุฑูุฒ ุงูุงุณุชุฌุงุจุฉ: $response"
        return 1
    fi
}

# ุฏุงูุฉ ูุงุฎุชุจุงุฑ API endpoint
test_api_endpoint() {
    local description=$1
    local method=$2
    local url=$3
    local data=$4
    local expected_code=$5
    
    echo "๐งช ุงุฎุชุจุงุฑ: $description"
    
    if [ "$method" = "POST" ]; then
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$url" || echo "000")
    else
        response=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
    fi
    
    if [ "$response" = "$expected_code" ]; then
        echo "โ $description - ูุฌุญ"
        return 0
    else
        echo "โ $description - ูุดู (ูุชููุน: $expected_codeุ ุญุตู ุนูู: $response)"
        return 1
    fi
}

# ุนุฏุงุฏ ุงูุฃุฎุทุงุก
errors=0

# ุงุฎุชุจุงุฑ ุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ
echo "๐ ุงุฎุชุจุงุฑ Health Checks..."

check_health "Gateway" "$GATEWAY_URL" || ((errors++))
check_health "Auth Service" "$AUTH_URL" || ((errors++))
check_health "Users Service" "$USERS_URL" || ((errors++))

# ุงุฎุชุจุงุฑ APIs
echo "๐ ุงุฎุชุจุงุฑ APIs..."

# ุงุฎุชุจุงุฑ ุชุณุฌูู ูุณุชุฎุฏู ุฌุฏูุฏ
test_user_email="ci-test-$(date +%s)@example.com"
signup_data='{"email":"'$test_user_email'","password":"testpass123"}'

test_api_endpoint "User Signup via Gateway" "POST" "$GATEWAY_URL/auth/signup" "$signup_data" "201" || ((errors++))

# ุงุฎุชุจุงุฑ ุชุณุฌูู ุงูุฏุฎูู
signin_data='{"email":"'$test_user_email'","password":"testpass123"}'

# ุงุฎุชุจุงุฑ signin ูุน ุงูุชุญูู ูู response code ูุฑู
echo "๐งช ุงุฎุชุจุงุฑ: User Signin via Gateway"
signin_response_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
    -H "Content-Type: application/json" \
    -d "$signin_data" \
    "$GATEWAY_URL/auth/signin" || echo "000")

if [ "$signin_response_code" = "200" ] || [ "$signin_response_code" = "201" ]; then
    echo "โ User Signin via Gateway - ูุฌุญ (ููุฏ: $signin_response_code)"
else
    echo "โ User Signin via Gateway - ูุดู (ูุชููุน: 200 ุฃู 201ุ ุญุตู ุนูู: $signin_response_code)"
    ((errors++))
fi

# ุงุฎุชุจุงุฑ ุงูุญุตูู ุนูู ุฌููุน ุงููุณุชุฎุฏููู
test_api_endpoint "Get All Users" "GET" "$USERS_URL/users/all" "" "200" || ((errors++))

# ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุงุชุตุงูุงุช
echo "๐ ุงุฎุชุจุงุฑ ููุงุนุฏ ุงูุจูุงูุงุช ูุงูุงุชุตุงูุงุช..."

# ุงูุชุญูู ูู ุงุชุตุงู PostgreSQL
echo "๐ ุงุฎุชุจุงุฑ ุงุชุตุงู PostgreSQL..."
if docker compose exec -T postgres pg_isready -U postgres; then
    echo "โ PostgreSQL ูุชุตู"
else
    echo "โ PostgreSQL ุบูุฑ ูุชุตู"
    ((errors++))
fi

# ุงูุชุญูู ูู ุงุชุตุงู Redis
echo "๐ ุงุฎุชุจุงุฑ ุงุชุตุงู Redis..."
if docker compose exec -T redis redis-cli ping | grep -q "PONG"; then
    echo "โ Redis ูุชุตู"
else
    echo "โ Redis ุบูุฑ ูุชุตู"
    ((errors++))
fi

# ุงูุชุญูู ูู ุงุชุตุงู Kafka
echo "๐ ุงุฎุชุจุงุฑ ุงุชุตุงู Kafka..."
if docker compose exec -T kafka kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1; then
    echo "โ Kafka ูุชุตู"
else
    echo "โ Kafka ุบูุฑ ูุชุตู"
    ((errors++))
fi

# ุงุฎุชุจุงุฑ ุงูุชูุงูู ุจูู ุงูุฎุฏูุงุช (Kafka messaging)
echo "๐ ุงุฎุชุจุงุฑ ุชูุงูู ุงูุฎุฏูุงุช..."

# ุงุฎุชุจุงุฑ signin ุงูุฐู ูุณุชุฎุฏู Kafka ููุชูุงุตู ุจูู auth ู users services
echo "๐ ุงุฎุชุจุงุฑ ุชูุงูู Kafka ุจูู ุงูุฎุฏูุงุช..."
signin_response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "$signin_data" \
    "$GATEWAY_URL/auth/signin")

if echo "$signin_response" | grep -q "createdAt"; then
    echo "โ ุชูุงูู Kafka ูุนูู - signin ูุญุตู ุนูู ุจูุงูุงุช ูู users service"
else
    echo "โ ุชูุงูู Kafka ูุง ูุนูู - signin ูุง ูุญุตู ุนูู ุจูุงูุงุช ูุงููุฉ"
    ((errors++))
fi

# ุนุฑุถ ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ
echo ""
echo "๐ ูุชุงุฆุฌ ุงูุงุฎุชุจุงุฑ:"
echo "=================="

if [ $errors -eq 0 ]; then
    echo "๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช!"
    echo "โ ุงููุธุงู ุฌุงูุฒ ููุฅูุชุงุฌ"
    exit 0
else
    echo "โ ูุดู $errors ุงุฎุชุจุงุฑ(ุงุช)"
    echo "๐ง ูุฑุฌู ูุฑุงุฌุนุฉ ุงูุณุฌูุงุช ูุงูุฅุตูุงุญ"
    
    # ุนุฑุถ ุณุฌูุงุช ุงูุฎุฏูุงุช ูู ุญุงูุฉ ุงููุดู
    echo ""
    echo "๐ ุณุฌูุงุช ุงูุฎุฏูุงุช:"
    echo "=================="
    docker compose logs --tail=20 auth-service
    echo "---"
    docker compose logs --tail=20 users-service
    
    exit 1
fi
