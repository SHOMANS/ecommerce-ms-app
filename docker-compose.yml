version: '3.8'

services:
  postgres:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      - prod-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    networks:
      - prod-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - '2181:2181'
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    networks:
      - prod-network
    volumes:
      - zookeeper_data:/bitnami
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  kafka:
    image: bitnami/kafka:3.9
    restart: always
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_KRAFT_MODE: 'false'
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    networks:
      - prod-network
    volumes:
      - kafka_data:/bitnami
    healthcheck:
      test:
        ['CMD-SHELL', 'kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1']
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  auth-service:
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
      target: production
    # Remove port mapping for production - only nginx should be exposed
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET:-change_this_in_production}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: auth_user
      DB_PASSWORD: password
      DB_NAME: auth_service
      KAFKA_BROKERS: kafka:9093
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure_redis_password}
      NODE_ENV: production
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3001/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  users-service:
    build:
      context: .
      dockerfile: ./apps/users-service/Dockerfile
      target: production
    # Remove port mapping for production - only nginx should be exposed
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      PORT: 3002
      JWT_SECRET: ${JWT_SECRET:-change_this_in_production}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: users_user
      DB_PASSWORD: password
      DB_NAME: users_service
      KAFKA_BROKERS: kafka:9093
      NODE_ENV: production
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3002/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  nginx:
    image: nginx:latest
    container_name: nginx-gateway-prod
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./gateway/default.conf:/etc/nginx/conf.d/default.conf
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      # SSL certificates (uncomment when ready)
      # - ./ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
      - users-service
    networks:
      - prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  pgdata:
  redis_data:
  zookeeper_data:
  kafka_data:

networks:
  prod-network:
    driver: bridge
