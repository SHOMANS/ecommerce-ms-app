name: CI/CD Pipeline

# تشغيل الـ pipeline عند:
on:
  # Push إلى أي branch
  push:
    branches: ["*"]
  # Pull requests إلى main branch
  pull_request:
    branches: [main]
  # تشغيل يدوي
  workflow_dispatch:

# متغيرات البيئة العامة
env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

jobs:
  # Job 1: اختبار الكود والبناء
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: � Install pnpm
        run: npm install -g pnpm

      - name: �🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build shared packages
        run: pnpm --filter @ecommerce/shared build

      - name: 🏗️ Build auth service
        run: pnpm --filter @ecommerce/auth-service build

      - name: 🏗️ Build users service
        run: pnpm --filter @ecommerce/users-service build

      - name: 🧪 Run tests
        run: pnpm test

      - name: 🔍 Lint code
        run: pnpm lint

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml

  # Job 2: بناء Docker images
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup environment
        run: |
          chmod +x scripts/setup-env.sh
          ./scripts/setup-env.sh dev

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and test with Docker Compose
        run: |
          # بناء الـ images
          docker-compose -f docker-compose.dev.yml build

          # تشغيل الخدمات للاختبار
          docker-compose -f docker-compose.dev.yml up -d

          # انتظار حتى تصبح الخدمات جاهزة
          sleep 30

          # اختبار الخدمات
          chmod +x scripts/test-services.sh
          ./scripts/test-services.sh

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose -f docker-compose.dev.yml down

  # Job 3: أمان وفحص الثغرات
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Job 4: نشر للإنتاج (فقط من main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup environment for production
        run: |
          chmod +x scripts/setup-env.sh
          ./scripts/setup-env.sh prod

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build production images
        run: |
          # بناء images للإنتاج
          docker-compose build

          # تسمية الـ images
          docker tag ecommerce-ms-app_auth-service ${{ env.IMAGE_PREFIX }}/auth-service:${{ github.sha }}
          docker tag ecommerce-ms-app_users-service ${{ env.IMAGE_PREFIX }}/users-service:${{ github.sha }}
          docker tag ecommerce-ms-app_auth-service ${{ env.IMAGE_PREFIX }}/auth-service:latest
          docker tag ecommerce-ms-app_users-service ${{ env.IMAGE_PREFIX }}/users-service:latest

      - name: 📤 Push images to registry
        run: |
          docker push ${{ env.IMAGE_PREFIX }}/auth-service:${{ github.sha }}
          docker push ${{ env.IMAGE_PREFIX }}/users-service:${{ github.sha }}
          docker push ${{ env.IMAGE_PREFIX }}/auth-service:latest
          docker push ${{ env.IMAGE_PREFIX }}/users-service:latest

      - name: 🚀 Deploy to production server
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🚀 Deploying to production server..."
          # هنا يمكن إضافة كود النشر للخادم
          # مثل استخدام SSH أو webhook لتحديث الخادم

  # Job 5: إشعارات
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build, security-scan]
    if: always()

    steps:
      - name: 📢 Notify on success
        if: needs.test-and-build.result == 'success' && needs.docker-build.result == 'success'
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"

      - name: 📢 Notify on failure
        if: needs.test-and-build.result == 'failure' || needs.docker-build.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          echo "Please check the logs for details."
