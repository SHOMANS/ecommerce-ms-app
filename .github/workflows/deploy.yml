name: Auto Deploy to EC2

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.DEPLOYMENT_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            set -e
            
            echo "Starting deployment..."
            
            # Navigate to project directory
            cd ~/ecommerce-ms-app || {
              echo "Project directory not found"
              exit 1
            }
            
            # Update code
            echo "Updating code from GitHub..."
            git fetch origin
            git reset --hard origin/main
            
            # Stop current services
            echo "Stopping current services..."
            docker compose down --remove-orphans || true
            
            # Cleanup old images
            echo "Cleaning up old images..."
            docker system prune -f || true
            
            # Setup production environment
            echo "Setting up production environment..."
            chmod +x scripts/setup-env.sh
            ./scripts/setup-env.sh prod
            
            # Build and start new services
            echo "Building and starting services..."
            docker compose up --build -d
            
            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 60
            
            # Test services
            echo "Testing services..."
            if curl -f http://localhost/health; then
              echo "✅ Deployment successful - Services are running"
            else
              echo "❌ Deployment failed - Services are not running"
              docker compose logs --tail=50
              exit 1
            fi
            
            # Show container status
            echo "Container status:"
            docker compose ps
            
            echo "🎉 Deployment completed successfully!"
          ENDSSH

      - name: Health Check After Deployment
        run: |
          echo "Checking service health after deployment..."

          # Additional wait to ensure services are ready
          sleep 30

          # Test services from external
          if curl -f http://${{ secrets.EC2_HOST }}/health; then
            echo "✅ Services are running correctly from external"
          else
            echo "❌ Services not accessible from external - check Security Groups"
            exit 1
          fi

      - name: Deployment Notification
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "🎉 Deployment to production successful!"
            echo "🌐 URL: http://${{ secrets.EC2_HOST }}"
            echo "⏰ Time: $(date)"
            echo "📝 Commit: ${{ github.sha }}"
          else
            echo "❌ Deployment failed!"
            echo "🔧 Please check logs"
          fi
