name: Release Management

# إدارة الإصدارات التلقائية
on:
  push:
    branches: [main]
    paths:
      - "apps/**"
      - "packages/**"
      - "package.json"
      - "!**/*.md"

  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

env:
  REGISTRY: ghcr.io

jobs:
  # تحديد نوع الإصدار تلقائياً
  detect-changes:
    name: Detect Changes & Version Type
    runs-on: ubuntu-latest
    outputs:
      version_type: ${{ steps.version.outputs.type }}
      should_release: ${{ steps.version.outputs.should_release }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Analyze changes
        id: version
        run: |
          # تحليل التغييرات لتحديد نوع الإصدار
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # فحص الـ commits منذ آخر tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $last_tag"

          # جمع رسائل الـ commits
          commits=$(git log ${last_tag}..HEAD --oneline --no-merges)
          echo "Recent commits:"
          echo "$commits"

          # تحديد نوع الإصدار حسب الكلمات المفتاحية
          if echo "$commits" | grep -qi "BREAKING\|breaking change\|major"; then
            version_type="major"
          elif echo "$commits" | grep -qi "feat\|feature\|minor"; then
            version_type="minor"
          elif echo "$commits" | grep -qi "fix\|patch\|bugfix"; then
            version_type="patch"
          else
            version_type="patch"
          fi

          # التحقق إذا كان هناك تغييرات تستحق إصدار
          if [ -n "$commits" ]; then
            should_release="true"
          else
            should_release="false"
          fi

          echo "type=$version_type" >> $GITHUB_OUTPUT
          echo "should_release=$should_release" >> $GITHUB_OUTPUT

          echo "Detected version type: $version_type"
          echo "Should release: $should_release"

  # إنشاء إصدار جديد
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_release == 'true'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Install dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile

      - name: 🔢 Calculate new version
        id: version
        run: |
          # الحصول على الإصدار الحالي
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"

          # حساب الإصدار الجديد
          version_type="${{ needs.detect-changes.outputs.version_type }}"

          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}

          case $version_type in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: 📝 Update version in package.json
        run: |
          new_version="${{ steps.version.outputs.new_version }}"

          # تحديث package.json الرئيسي
          npm version $new_version --no-git-tag-version

          # تحديث إصدارات الخدمات
          cd apps/auth-service && npm version $new_version --no-git-tag-version
          cd ../users-service && npm version $new_version --no-git-tag-version
          cd ../../packages/shared && npm version $new_version --no-git-tag-version

      - name: 📋 Generate changelog
        id: changelog
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          echo "# Changelog for v$new_version" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          echo "**Release Date:** $(date '+%Y-%m-%d')" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          # جمع الـ commits وتصنيفها
          echo "## 🚀 Features" >> CHANGELOG_TEMP.md
          git log ${last_tag}..HEAD --oneline --no-merges | grep -i "feat\|feature" | sed 's/^/- /' >> CHANGELOG_TEMP.md || echo "- No new features" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          echo "## 🐛 Bug Fixes" >> CHANGELOG_TEMP.md
          git log ${last_tag}..HEAD --oneline --no-merges | grep -i "fix\|bugfix" | sed 's/^/- /' >> CHANGELOG_TEMP.md || echo "- No bug fixes" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          echo "## 🔧 Improvements" >> CHANGELOG_TEMP.md
          git log ${last_tag}..HEAD --oneline --no-merges | grep -v -i "feat\|feature\|fix\|bugfix" | sed 's/^/- /' >> CHANGELOG_TEMP.md || echo "- No improvements" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          echo "## 📊 Statistics" >> CHANGELOG_TEMP.md
          echo "- **Commits:** $(git rev-list ${last_tag}..HEAD --count)" >> CHANGELOG_TEMP.md
          echo "- **Files changed:** $(git diff --name-only ${last_tag}..HEAD | wc -l)" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          cat CHANGELOG_TEMP.md

      - name: 💾 Commit version changes
        run: |
          new_version="${{ steps.version.outputs.new_version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .
          git commit -m "🔖 Release v$new_version"
          git tag -a "v$new_version" -m "Release v$new_version"

          git push origin main
          git push origin "v$new_version"

      - name: 🚀 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body_path: CHANGELOG_TEMP.md
          draft: false
          prerelease: false

  # بناء ونشر Docker images للإصدار الجديد
  build-and-publish:
    name: Build & Publish Release
    runs-on: ubuntu-latest
    needs: [detect-changes, create-release]
    if: needs.detect-changes.outputs.should_release == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-release.outputs.new_version }}

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup environment
        run: |
          chmod +x scripts/setup-env.sh
          ./scripts/setup-env.sh prod

      - name: 🏗️ Build and tag images
        run: |
          version="${{ needs.create-release.outputs.new_version }}"

          # بناء الـ images
          docker compose build

          # تسمية الـ images بالإصدار الجديد
          docker tag ecommerce-ms-app_auth-service ${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:v$version
          docker tag ecommerce-ms-app_users-service ${{ env.REGISTRY }}/${{ github.repository_owner }}/users-service:v$version

          # تسمية كـ latest أيضاً
          docker tag ecommerce-ms-app_auth-service ${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:latest
          docker tag ecommerce-ms-app_users-service ${{ env.REGISTRY }}/${{ github.repository_owner }}/users-service:latest

      - name: 📤 Push images
        run: |
          version="${{ needs.create-release.outputs.new_version }}"

          # رفع الـ images
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:v$version
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/users-service:v$version
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/users-service:latest

          echo "🎉 Successfully published images for version v$version"

  # إشعار بنجاح الإصدار
  notify-release:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish]
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: 📢 Success notification
        run: |
          version="${{ needs.create-release.outputs.new_version }}"
          echo "🎉 Successfully released version v$version!"
          echo "📦 Docker images published to registry"
          echo "🔗 Release notes: https://github.com/${{ github.repository }}/releases/tag/v$version"
