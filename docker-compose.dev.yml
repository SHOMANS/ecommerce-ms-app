version: '3.8'

services:
  postgres:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
      - ./db/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      - dev-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    networks:
      - dev-network
    volumes:
      - redis_dev:/data

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - '2181:2181'
    environment:
      ALLOW_ANONYMOUS_LOGIN: ${ALLOW_ANONYMOUS_LOGIN}
    networks:
      - dev-network
    volumes:
      - zookeeper_dev:/bitnami

  kafka:
    image: bitnami/kafka:3.9
    restart: always
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_CFG_KRAFT_MODE: ${KAFKA_CFG_KRAFT_MODE}
      KAFKA_CFG_ZOOKEEPER_CONNECT: ${KAFKA_CFG_ZOOKEEPER_CONNECT}
      KAFKA_CFG_ADVERTISED_LISTENERS: ${KAFKA_CFG_ADVERTISED_LISTENERS}
      KAFKA_CFG_LISTENERS: ${KAFKA_CFG_LISTENERS}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: ${KAFKA_CFG_INTER_BROKER_LISTENER_NAME}
      ALLOW_PLAINTEXT_LISTENER: ${ALLOW_PLAINTEXT_LISTENER}
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
    depends_on:
      - zookeeper
    networks:
      - dev-network
    volumes:
      - kafka_dev:/bitnami
    healthcheck:
      test:
        ['CMD-SHELL', 'kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1']
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  auth-service:
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
      target: development
    ports:
      - '${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}'
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      PORT: ${AUTH_SERVICE_PORT}
      JWT_SECRET: ${JWT_SECRET}
      DB_HOST: ${AUTH_DB_HOST}
      DB_PORT: ${AUTH_DB_PORT}
      DB_USERNAME: ${AUTH_DB_USERNAME}
      DB_PASSWORD: ${AUTH_DB_PASSWORD}
      DB_NAME: ${AUTH_DB_NAME}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      NODE_ENV: ${NODE_ENV}
    volumes:
      # Mount source code for hot reload
      - ./apps/auth-service/src:/app/apps/auth-service/src
      - ./packages/shared/src:/app/packages/shared/src
      - /app/node_modules
      - /app/apps/auth-service/node_modules
    networks:
      - dev-network
    restart: unless-stopped

  users-service:
    build:
      context: .
      dockerfile: ./apps/users-service/Dockerfile
      target: development
    ports:
      - '${USERS_SERVICE_PORT}:${USERS_SERVICE_PORT}'
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      PORT: ${USERS_SERVICE_PORT}
      JWT_SECRET: ${JWT_SECRET}
      DB_HOST: ${USERS_DB_HOST}
      DB_PORT: ${USERS_DB_PORT}
      DB_USERNAME: ${USERS_DB_USERNAME}
      DB_PASSWORD: ${USERS_DB_PASSWORD}
      DB_NAME: ${USERS_DB_NAME}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      # Mount source code for hot reload
      - ./apps/users-service/src:/app/apps/users-service/src
      - ./packages/shared/src:/app/packages/shared/src
      - /app/node_modules
      - /app/apps/users-service/node_modules
    networks:
      - dev-network
    restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: nginx-gateway-dev
    ports:
      - '${NGINX_PORT}:80'
    volumes:
      - ./gateway/default.dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - auth-service
      - users-service
    networks:
      - dev-network
    restart: unless-stopped

volumes:
  pgdata_dev:
  redis_dev:
  zookeeper_dev:
  kafka_dev:

networks:
  dev-network:
    driver: bridge
